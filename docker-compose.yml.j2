version: "3.3"

networks:
  traefik:

volumes:
  jenkins-docker-certs:
  taiga-static:
  taiga-async:
  taiga-events:

services:
  traefik:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    command:
      # - '--log.level=debug'
      - '--api.insecure=false'
      - '--pilot.dashboard=false'
      - "--providers.docker=true"
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.http3=true"
      - "--experimental.http3=true"
      - "--certificatesresolvers.default.acme.tlschallenge=true"
      - "--certificatesresolvers.default.acme.email={{ domain_email }}"
      - "--certificatesresolvers.default.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - /letsencrypt:/letsencrypt:rw
    networks:
      - traefik
  gitlab:
    image: gitlab/gitlab-ce
    container_name: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://git.{{ domain }}'
        nginx['listen_https'] = false
        nginx['listen_port'] = 80
        nginx['redirect_http_to_https'] = false
        letsencrypt['enable'] = false
    restart: unless-stopped
    volumes:
      - /gitlab/config:/etc/gitlab
      - /gitlab/log:/var/log/gitlab
      - /gitlab/data:/var/opt/gitlab
    ports:
      - "22:22"
    shm_size: "256M"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitlab.rule=Host(`git.{{ domain }}`)"
      - "traefik.http.routers.gitlab.entrypoints=web-secure"
      - "traefik.http.routers.gitlab.tls.certresolver=default"
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"
      - "traefik.http.middlewares.gitlab_compress.compress=true"
      - "traefik.http.routers.gitlab.middlewares=gitlab_compress"
    networks:
      - traefik     

  mattermost:
    image: mattermost/mattermost-team-edition
    container_name: mattermost
    restart: unless-stopped
    extra_hosts:
      - "postgres:host-gateway"
    tmpfs:
      - /tmp
    volumes:
      - /mattermost/config:/mattermost/config:rw
      - /mattermost/data:/mattermost/data:rw
      - /mattermost/logs:/mattermost/logs:rw
      - /mattermost/plugins:/mattermost/plugins:rw
      - /mattermost/client-plugins:/mattermost/client/plugins:rw
      - /mattermost/bleve-indexes:/mattermost/bleve-indexes:rw
    environment:
      - TZ=Europe/Rome
      - MM_SQLSETTINGS_DRIVERNAME=postgres
      - MM_SQLSETTINGS_DATASOURCE=postgres://mmuser:{{ mattermost_password }}@postgres:5432/mattermost?sslmode=disable
      - MM_BLEVESETTINGS_INDEXDIR=/mattermost/bleve-indexes
      - MM_SERVICESETTINGS_SITEURL=https://chat.{{ domain }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mattermost.rule=Host(`chat.{{ domain }}`)"
      - "traefik.http.routers.mattermost.entrypoints=web-secure"
      - "traefik.http.routers.mattermost.tls.certresolver=default"
      - "traefik.http.services.mattermost.loadbalancer.server.port=8065"
      - "traefik.http.middlewares.mattermost_compress.compress=true"
      - "traefik.http.routers.mattermost.middlewares=mattermost_compress"
    networks:
      - traefik

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    extra_hosts:
      - "postgres:host-gateway"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube?sslmode=disable
      SONAR_JDBC_USERNAME: squser
      SONAR_JDBC_PASSWORD: {{ sonarqube_password }}
    volumes:
      - /sonarqube/data:/opt/sonarqube/data
      - /sonarqube/extensions:/opt/sonarqube/extensions
      - /sonarqube/logs:/opt/sonarqube/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`qube.{{ domain }}`)"
      - "traefik.http.routers.sonarqube.entrypoints=web-secure"
      - "traefik.http.routers.sonarqube.tls.certresolver=default"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.sonarqube_compress.compress=true"
      - "traefik.http.routers.sonarqube.middlewares=sonarqube_compress"
    networks:
      - traefik


  docker:
    image: docker:dind
    container_name: docker
    restart: unless-stopped
    privileged: true
    volumes:
      - jenkins-docker-certs:/certs/client
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    command:
      - --storage-driver=overlay2
    networks:
      - traefik

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    volumes:
      - /jenkins:/var/jenkins_home
      - {{ docker_bin.stdout }}:/usr/bin/docker
      - jenkins-docker-certs:/certs/client:ro
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`ci.{{ domain }}`)"
      - "traefik.http.routers.jenkins.entrypoints=web-secure"
      - "traefik.http.routers.jenkins.tls.certresolver=default"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.jenkins_compress.compress=true"
      - "traefik.http.routers.jenkins.middlewares=jenkins_compress"
    networks:
      - traefik

  taiga_back:
    image: taigaio/taiga-back:latest
    container_name: taiga_back
    restart: unless-stopped
    extra_hosts:
      - "postgres:host-gateway"
    volumes:
      - taiga-static:/taiga-back/static
      - /taiga/media:/taiga-back/media
    environment:
      - POSTGRES_DB=taiga
      - POSTGRES_USER=tuser
      - POSTGRES_PASSWORD={{ taiga_password }}
      - POSTGRES_HOST=postgres
      - TAIGA_SECRET_KEY={{ taiga_secret }}
      - TAIGA_SITES_DOMAIN=taiga.{{ domain }}
      - TAIGA_SITES_SCHEME=https
      - EVENTS_PUSH_BACKEND_URL=amqp://tuser:{{ taiga_password }}@taiga_events_rabbitmq:5672/taiga
      - CELERY_BROKER_URL=amqp://tuser:{{ taiga_password }}@taiga_async_rabbitmq:5672/taiga
      - ENABLE_TELEMETRY=False
      - ENABLE_GITLAB_AUTH=True
      - GITLAB_API_CLIENT_ID={{ taiga_gitlab_client_id }}
      - GITLAB_API_CLIENT_SECRET={{ taiga_gitlab_client_secret }}
      - GITLAB_URL=https://git.{{ domain }}
      - PUBLIC_REGISTER_ENABLED=True
    depends_on:
      - taiga_events_rabbitmq
      - taiga_async_rabbitmq
    networks:
      - traefik

  taiga_async:
    extra_hosts:
      - "postgres:host-gateway"
    image: taigaio/taiga-back:latest
    entrypoint: ["/taiga-back/docker/async_entrypoint.sh"]
    container_name: taiga_async
    restart: unless-stopped
    volumes:
      - taiga-static:/taiga-back/static
      - /taiga/media:/taiga-back/media
    environment:
      - POSTGRES_DB=taiga
      - POSTGRES_USER=tuser
      - POSTGRES_PASSWORD={{ taiga_password }}
      - POSTGRES_HOST=postgres
      - TAIGA_SECRET_KEY={{ taiga_secret }}
      - TAIGA_SITES_DOMAIN=taiga.{{ domain }}
      - TAIGA_SITES_SCHEME=https
      - EVENTS_PUSH_BACKEND_URL=amqp://tuser:{{ taiga_password }}@taiga_events_rabbitmq:5672/taiga
      - CELERY_BROKER_URL=amqp://tuser:{{ taiga_password }}@taiga_async_rabbitmq:5672/taiga
      - ENABLE_TELEMETRY="False"
    depends_on:
      - taiga_back
      - taiga_async_rabbitmq
    networks:
      - traefik

  taiga_async_rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga_async_rabbitmq
    restart: unless-stopped
    volumes:
      - taiga-async:/var/lib/rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE={{ taiga_secret }}
      - RABBITMQ_DEFAULT_USER=tuser
      - RABBITMQ_DEFAULT_PASS={{ taiga_password }}
      - RABBITMQ_DEFAULT_VHOST=taiga
    networks:
      - traefik

  taiga_front:
    image: taigaio/taiga-front:latest
    container_name: taiga_front
    restart: unless-stopped
    environment:
      - TAIGA_URL=https://taiga.{{ domain }}
      - TAIGA_WEBSOCKETS_URL=wss://taiga.{{ domain }}
      - ENABLE_GITLAB_AUTH=true
      - GITLAB_CLIENT_ID={{ taiga_gitlab_client_id }}
      - GITLAB_URL=https://git.{{ domain }}
      - PUBLIC_REGISTER_ENABLED=true
    networks:
      - traefik

  taiga_events:
    image: taigaio/taiga-events:latest
    container_name: taiga_events
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://tuser:{{ taiga_password }}@taiga_events_rabbitmq:5672/taiga
      - TAIGA_SECRET_KEY={{ taiga_secret }}
    depends_on:
      - taiga_events_rabbitmq
    networks:
      - traefik

  taiga_events_rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: taiga_events_rabbitmq
    restart: unless-stopped
    volumes:
      - taiga-events:/var/lib/rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE={{ taiga_secret }}
      - RABBITMQ_DEFAULT_USER=tuser
      - RABBITMQ_DEFAULT_PASS={{ taiga_password }}
      - RABBITMQ_DEFAULT_VHOST=taiga
    networks:
      - traefik

  taiga_protected:
    image: taigaio/taiga-protected:latest
    container_name: taiga_protected
    restart: unless-stopped
    environment:
      - MAX_AGE=360
      - SECRET_KEY={{ taiga_secret }}
    networks:
      - traefik

  taiga_gateway:
    image: nginxinc/nginx-unprivileged
    container_name: taiga_gateway
    restart: unless-stopped
    user: 999:999
    volumes:
      - ./taiga_nginx.conf:/etc/nginx/conf.d/default.conf
      - taiga-static:/taiga/static
      - /taiga/media:/taiga/media
    depends_on:
      - taiga_front
      - taiga_back
      - taiga_events
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taiga.rule=Host(`taiga.{{ domain }}`)"
      - "traefik.http.routers.taiga.entrypoints=web-secure"
      - "traefik.http.routers.taiga.tls.certresolver=default"
      - "traefik.http.services.taiga.loadbalancer.server.port=80"
      - "traefik.http.middlewares.taiga_compress.compress=true"
      - "traefik.http.routers.taiga.middlewares=taiga_compress"
    networks:
      - traefik

  homepage:
    image: flashspys/nginx-static
    container_name: homepage
    restart: unless-stopped
    volumes: 
      - /homepage:/static
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`{{ domain }}`)"
      - "traefik.http.routers.homepage.entrypoints=web-secure"
      - "traefik.http.routers.homepage.tls.certresolver=default"
      - "traefik.http.services.homepage.loadbalancer.server.port=80"
      - "traefik.http.middlewares.homepage_compress.compress=true"
      - "traefik.http.routers.homepage.middlewares=homepage_compress"
    networks:
      - traefik
