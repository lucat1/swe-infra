- name: Create the '/mattermost' directories
  ansible.builtin.file:
    path: '{{item}}'
    state: directory
    owner: 2000
    group: 2000
    mode: '0770'
  loop:
   - '/mattermost/config'
   - '/mattermost/data'
   - '/mattermost/logs'
   - '/mattermost/plugins'
   - '/mattermost/client-plugins'
   - '/mattermost/belve-indexes'

- name: Check if mattermost_password.txt exists
  ansible.builtin.stat:
    path: /root/mattermost_password.txt
  register: mattermost_password_file

- name: Generate the password for the Mattermost postgresql database
  block:
  - name: Generate random password for Mattermost postgresql database
    ansible.builtin.set_fact:
      mattermost_db_password: "{{ lookup('ansible.builtin.password', '/dev/null') }}"
  - name: Create a file for Mattermost DB password
    ansible.builtin.file:
      path: /root/mattermost_password.txt
      state: touch
      mode: '0700'
      owner: root
  - name: Write Mattermost DB password to a file
    ansible.builtin.copy:
      content: "{{ mattermost_db_password }}"
      dest: /root/mattermost_password.txt
  when: not mattermost_password_file.stat.exists

- name: Read the password for the Mattermost postgresql database
  block:
    - name: Read the file
      ansible.builtin.slurp:
        src: /root/mattermost_password.txt
      register: mattermost_db_password_base
    - name: Decode the variable
      set_fact:
        mattermost_db_password: "{{ mattermost_db_password_base.content | b64decode }}"
  when: mattermost_password_file.stat.exists

- name: Create the Mattermost postgresql database
  become: yes
  become_user: postgres
  community.postgresql.postgresql_db:
    name: mattermost
    encoding: UTF-8
    lc_collate: en_US.UTF-8 # TODO check with locale -a
    lc_ctype: en_US.UTF-8
    template: template0

- name: Create the mattermost postgresql user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    name: mmuser
    password: '{{ mattermost_db_password }}'

- name: GRANT ALL PRIVILEGES ON DATABASE mattermost TO mmuser
  become: yes
  become_user: postgres
  community.postgresql.postgresql_privs:
    db: postgres
    privs: ALL
    type: database
    obj: mattermost
    role: mmuser

- name: Restart PostgresSQL
  ansible.builtin.service:
    name: postgresql
    state: restarted
